.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.46.4.
.TH STP "1" "October 2015" "STP version 2.1.1" "User Commands"
.SH NAME
STP \- stp
.SH DESCRIPTION
USAGE: stp [options] <input\-file>
.IP
where input is SMTLIB1/2 or CVC depending on options and file extension
.SS "Most important options:"
.TP
\fB\-h\fR [ \fB\-\-help\fR ]
print this help
.TP
\fB\-\-version\fR
print version number
.TP
\fB\-\-disable\-simplify\fR
disable all simplifications
.TP
\fB\-w\fR [ \fB\-\-switch\-word\fR ]
switch off wordlevel solver
.TP
\fB\-a\fR [ \fB\-\-disable\-opt\-inc\fR ]
disable potentially size\-increasing optimisations
.TP
\fB\-\-disable\-cbitp\fR
disable constant bit propagation
.TP
\fB\-\-disable\-equality\fR
disable equality propagation
.SS "SAT Solver options:"
.TP
\fB\-\-simplifying\-minisat\fR
use installed simplifying minisat version as the
solver
.TP
\fB\-\-minisat\fR
use installed minisat version as the solver (default)
.SS "Refinement options:"
.TP
\fB\-\-oldstyle\-refinement\fR
Do abstraction\-refinement outside the SAT solver
.TP
\fB\-r\fR [ \fB\-\-ackermanize\fR ]
eagerly encode array\-read axioms (Ackermannistaion)
.TP
\fB\-x\fR [ \fB\-\-flatten\fR ]
flatten XORs
.SS "Printing options:"
.TP
\fB\-b\fR [ \fB\-\-print\-stpinput\fR ]
print STP input back to cout
.TP
\fB\-\-print\-back\-CVC\fR
print input in CVC format, then exit
.TP
\fB\-\-print\-back\-SMTLIB2\fR
print input in SMT\-LIB2 format, then exit
.TP
\fB\-\-print\-back\-SMTLIB1\fR
print input in SMT\-LIB1 format, then exit
.TP
\fB\-\-print\-back\-GDL\fR
print AiSee's graph format, then exit
.TP
\fB\-\-print\-back\-dot\fR
print dotty/neato's graph format, then exit
.TP
\fB\-p\fR [ \fB\-\-print\-counterex\fR ]
print counterexample
.TP
\fB\-y\fR [ \fB\-\-print\-counterexbin\fR ]
print counterexample in binary
.TP
\fB\-q\fR [ \fB\-\-print\-arrayval\fR ]
print arrayval declared order
.TP
\fB\-s\fR [ \fB\-\-print\-functionstat\fR ]
print function statistics
.TP
\fB\-t\fR [ \fB\-\-print\-quickstat\fR ]
print quick statistics
.TP
\fB\-v\fR [ \fB\-\-print\-nodes\fR ]
print nodes
.TP
\fB\-z\fR [ \fB\-\-print\-varorder\fR ]
Print SAT variable order
.TP
\fB\-n\fR [ \fB\-\-print\-output\fR ]
Print output
.SS "Input options:"
.TP
\fB\-m\fR [ \fB\-\-SMTLIB1\fR ]
use the SMT\-LIB1 format parser
.TP
\fB\-\-SMTLIB2\fR
use the SMT\-LIB2 format parser
.SS "Output options:"
.TP
\fB\-\-output\-CNF\fR
save the CNF into output_[0..n].cnf
.TP
\fB\-\-output\-bench\fR
save in ABC's bench format to output.bench
.SS "Output options:"
.TP
\fB\-\-exit\-after\-CNF\fR
exit after the CNF has been generated
.TP
\fB\-g\fR [ \fB\-\-timeout\fR ] arg
Number of conflicts after which the SAT solver gives
up. \fB\-1\fR means never (default)
.TP
\fB\-i\fR [ \fB\-\-seed\fR ] arg
set random seed for STP's satisfiable output.
Random_seed is an integer >= 0
.TP
\fB\-\-random\-seed\fR
generate a random number for the SAT solver.
.TP
\fB\-d\fR [ \fB\-\-check\-sanity\fR ]
construct counterexample and check it
.SS "Hidden options:"
.TP
\fB\-\-file\fR arg
input file
.TP
\fB\-\-cryptominisat\fR
same as \fB\-\-cryptominisat4\fR
.PP
STP version number 2.1.1
